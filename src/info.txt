use crate::vector::Vector;
use crate::renderable::Renderable;

pub struct BoxBody {
    position: Vector,
    velocity: Vector,
    acceleration: Vector,
    render_box: (f64, f64),
    color: u32,
    mass: f64,
    is_static: bool,
}

impl BoxBody {
    pub(crate) fn new (position: Vector, render_box: (f64, f64), color: u32, mass: f64) -> BoxBody {
        BoxBody {
            position,
            velocity: Vector::new(0.0, 0.0),
            acceleration: Vector::new(0.0, 0.0),
            render_box,
            color,
            mass,
            is_static: false,
        }
    }

    pub(crate) fn new_static (position: Vector, render_box: (f64, f64), color: u32, velocity: Vector) -> BoxBody {
        BoxBody {
            position,
            velocity,
            acceleration: Vector::new(0.0, 0.0),
            render_box,
            color,
            mass: 0.0,
            is_static: true,
        }
    }

    fn get_acceleration(&self) -> Vector {
        self.acceleration
    }

    pub(crate) fn set_acceleration(&mut self, acceleration: Vector) {
        self.acceleration = acceleration;
    }
}

impl Renderable for BoxBody {
    fn render(&self, buffer: &mut Vec<Vec<u32>>) {
        let x = self.position.x;
        let y = self.position.y;
        let (w, h) = self.render_box;

        let lx = (x - self.render_box.0 / 2f64) as i32;
        let rx = (x + self.render_box.0 / 2f64) as i32;
        let ty = (y - self.render_box.1 / 2f64) as i32;
        let by = (y + self.render_box.1 / 2f64) as i32;

        for i in lx..rx {
            for j in ty..by {
                if i >= 0 && i < buffer[0].len() as i32 && j >= 0 && j < buffer.len() as i32 {
                    buffer[j as usize][i as usize] = self.color;
                }
            }
        }
    }

    fn update(&mut self, dt: f64) {
        self.velocity = self.velocity + self.acceleration * dt;
        self.position = self.position + self.velocity * dt;
    }
}

impl Body for BoxBody {
    fn apply_force(&mut self, force: Vector) {
        if self.is_static {
            return;
        }
        self.acceleration = self.acceleration + force / self.mass;
    }



    fn get_position(&self) -> Vector {
        self.position
    }
}

pub trait Body {
    fn apply_force(&mut self, force: Vector);

    fn get_position(&self) -> Vector;
}mod vector;
mod body;
mod renderable;
mod spring;

use minifb::{Key, Window, WindowOptions};
use body::Body;
use renderable::Renderable;
use vector::Vector;
use crate::body::BoxBody;

fn update_with_2d_buffer(window: &mut Window, buffer: &Vec<Vec<u32>>) {
    let mut screen_buffer: Vec<u32> = vec![0; buffer.len() * buffer[0].len()];
    for y in 0..buffer.len() {
        for x in 0..buffer[0].len() {
            screen_buffer[y * buffer[0].len() + x] = buffer[y][x];
        }
    }
    window.update_with_buffer(&screen_buffer, buffer[0].len(), buffer.len()).unwrap();
}

const FPS: f64 = 60.0;
const DT: f64 = 1.0 / FPS;
const BG: u32 = 0x000000;
const GRAVITY: Vector = Vector { x: 0.0, y: 9.8 };

const WINDOW_OPEN: (usize, usize) = (1000, 1000);

fn main() {
    let mut buffer: Vec<Vec<u32>> = vec![vec![0; WINDOW_OPEN.0]; WINDOW_OPEN.1];
    let mut window = Window::new("Spring",
                                  WINDOW_OPEN.0,
                                  WINDOW_OPEN.1,
                                  WindowOptions {
                                      resize: true,
                                      ..WindowOptions::default()
                                    }
    ).unwrap();

    let mut body = BoxBody::new(Vector::new(320.0, 240.0), (20.0, 20.0), 0xFF0000, 1.0);
    let mut ceiling_body = BoxBody::new_static(Vector::new(320.0, 0.0), (640.0, 20.0), 0x00FF00, Vector::new(0.0, 0.0));
    let mut spring = spring::Spring::new( 100.0, 0.2, 0x0000FF);


    while window.is_open() && !window.is_key_down(Key::Escape) {
        let t1 = std::time::Instant::now();
        if window.get_size() != (buffer[0].len(), buffer.len()) {
            let (nw, nh) = window.get_size();
            for row in 0..buffer.len() {
                buffer[row].resize(nw, 0);
            }
            buffer.resize(nh, vec![0; nw]);
        }

        {
            // flash the buffer
            for row in 0..buffer.len() {
                for col in 0..buffer[0].len() {
                    buffer[row][col] = BG;
                }
            }

            body.set_acceleration(Vector::new(0.0, 0.0));

            {
                spring.update(DT, &mut body, &mut ceiling_body);
            }
            {
                body.apply_force(GRAVITY);
                body.update(DT);
                ceiling_body.update(DT);
            }

            {
                spring.render(&mut buffer, &body, &ceiling_body);
                body.render(&mut buffer);
                ceiling_body.render(&mut buffer);
            }
        }

        update_with_2d_buffer(&mut window, &buffer);
        let t2 = std::time::Instant::now();
        let elapsed = t2 - t1;
        println!("Elapsed: {} ms", elapsed.as_millis());
        if elapsed.as_millis() < (1000.0 / FPS) as u128 {
            std::thread::sleep(std::time::Duration::from_millis(((1000.0 / FPS) as u128 - elapsed.as_millis()) as u64));
        }

    }
}
pub trait Renderable {
    fn render(&self, buffer: &mut Vec<Vec<u32>>);
    fn update(&mut self, dt: f64);
}use std::mem;
use crate::body::Body;
use crate::renderable::Renderable;

pub(crate) struct Spring {
    pub(crate) rest_length: f64,
    pub(crate) spring_constant: f64,
    color: u32
}

impl Spring {
    pub(crate) fn new(rest_length: f64, spring_constant: f64, color: u32) -> Spring {
        Spring {
            rest_length,
            spring_constant,
            color
        }
    }

    pub(crate) fn apply_force(&mut self, body1: &mut dyn Body, body2: &mut dyn Body) {
        let displacement = body2.get_position() - body1.get_position();
        let distance = displacement.magnitude();
        let force = displacement * (self.spring_constant * (distance - self.rest_length));
        body1.apply_force(force);
        body2.apply_force(-force);
    }
}

impl Spring {
    pub(crate) fn render(&self, buffer: &mut Vec<Vec<u32>>, body1: &dyn Body, body2: &dyn Body) {
        let (mut x1, mut y1) = (body1.get_position().x as i32, body1.get_position().y as i32);
        let (mut x2, mut y2) = (body2.get_position().x as i32, body2.get_position().y as i32);

        if x1 > x2 {
            mem::swap(&mut x1, &mut x2);
            mem::swap(&mut y1, &mut y2);
        }

        let (dx, dy) = (x2 - x1, y2 - y1);

        let mut set_pixel = |x: i32, y: i32, color: u32| {
            if x >= 0 && x < buffer[0].len() as i32 && y >= 0 && y < buffer.len() as i32 {
                buffer[y as usize][x as usize] = color;
            }
        };

        if dx.abs() >= dy.abs() {
            for i in x1..=x2 {
                let j = y1 + dy * (i - x1) / dx;
                set_pixel(i, j, self.color);
                set_pixel(i, j + 1, self.color);
                set_pixel(i, j - 1, self.color);
            }
        } else {
            if y1 > y2 {
                mem::swap(&mut x1, &mut x2);
                mem::swap(&mut y1, &mut y2);
            }
            for j in y1..=y2 {
                let i = x1 + dx * (j - y1) / dy;
                set_pixel(i, j, self.color);
                set_pixel(i + 1, j, self.color);
                set_pixel(i - 1, j, self.color);
            }
        }
    }

    pub(crate) fn update(&mut self, _dt: f64, body1: &mut dyn Body, body2: &mut dyn Body) {
        self.apply_force(body1, body2);
    }
}use std::ops::{Add, Sub, Mul, Div, Neg};

#[derive(Clone, Copy, Debug)]
pub struct Vector {
    pub(crate) x: f64,
    pub(crate) y: f64,
}

impl Vector {
    pub fn new(x: f64, y: f64) -> Vector {
        Vector { x, y }
    }

    pub fn magnitude(&self) -> f64 {
        (self.x * self.x + self.y * self.y).sqrt()
    }

    pub fn cross(&self, other: &Vector) -> f64 {
        self.x * other.y - self.y * other.x
    }
}

impl Add for Vector {
    type Output = Vector;

    fn add(self, other: Vector) -> Vector {
        Vector {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }

}

impl Sub for Vector {
    type Output = Vector;

    fn sub(self, other: Vector) -> Vector {
        Vector {
            x: self.x - other.x,
            y: self.y - other.y,
        }
    }
}

impl Mul<f64> for Vector {
    type Output = Vector;

    fn mul(self, scalar: f64) -> Vector {
        Vector {
            x: self.x * scalar,
            y: self.y * scalar,
        }
    }
}

impl Div<f64> for Vector {
    type Output = Vector;

    fn div(self, scalar: f64) -> Vector {
        Vector {
            x: self.x / scalar,
            y: self.y / scalar,
        }
    }
}

impl Mul for Vector {
    type Output = f64;

    fn mul(self, other: Vector) -> f64 {
        self.x * other.x + self.y * other.y
    }
}

impl Neg for Vector {
    type Output = Vector;

    fn neg(self) -> Vector {
        Vector {
            x: -self.x,
            y: -self.y,
        }
    }
}